/*
 - sample.cpp -

 Do not edit
 Generated by script

*/
#include "sample.h"

C::C(Json::Value root)
{

	_name = root["name"].asString();

}

C::C(const char* configFileName)
{
	std::ifstream json(configFileName);
	Json::Value root;
	Json::Reader reader;
	bool parsingSuccessful = reader.parse(json, root);
	if (!parsingSuccessful)
	{
		std::cout<<"Parsing Error! - Invalid JSON Data"<<std::endl;
		return;
	}

	_name = root["name"].asString();

}

C::~C()
{

}

D::D(Json::Value root)
{

	_a = root["a"].asBool();

}

D::D(const char* configFileName)
{
	std::ifstream json(configFileName);
	Json::Value root;
	Json::Reader reader;
	bool parsingSuccessful = reader.parse(json, root);
	if (!parsingSuccessful)
	{
		std::cout<<"Parsing Error! - Invalid JSON Data"<<std::endl;
		return;
	}

	_a = root["a"].asBool();

}

D::~D()
{

}

Sample::Sample(Json::Value root)
{

	_username = root["username"].asString();

	const Json::Value t_c = root["c"];
	for (unsigned int i = 0; i < t_c.size(); ++i)
		_c.push_back(C(t_c[i]));

	_verified = root["verified"].asBool();
	_d = D(root["d"]);
	_weight = root["weight"].asDouble();

	const Json::Value t_items = root["items"];
	for (unsigned int i = 0; i < t_items.size(); ++i)
		_items.push_back(t_items[i].asInt());

	_userid = root["userid"].asInt();

	const Json::Value t_games = root["games"];
	for (unsigned int i = 0; i < t_games.size(); ++i)
		_games.push_back(t_games[i].asString());


	const Json::Value t_thumbnail = root["thumbnail"];
	for (unsigned int i = 0; i < t_thumbnail.size(); ++i)
		_thumbnail.push_back(t_thumbnail[i].asString());


}

Sample::Sample(const char* configFileName)
{
	std::ifstream json(configFileName);
	Json::Value root;
	Json::Reader reader;
	bool parsingSuccessful = reader.parse(json, root);
	if (!parsingSuccessful)
	{
		std::cout<<"Parsing Error! - Invalid JSON Data"<<std::endl;
		return;
	}

	_username = root["username"].asString();

	const Json::Value t_c = root["c"];
	for (unsigned int i = 0; i < t_c.size(); ++i)
		_c.push_back(C(t_c[i]));

	_verified = root["verified"].asBool();
	_d = D(root["d"]);
	_weight = root["weight"].asDouble();

	const Json::Value t_items = root["items"];
	for (unsigned int i = 0; i < t_items.size(); ++i)
		_items.push_back(t_items[i].asInt());

	_userid = root["userid"].asInt();

	const Json::Value t_games = root["games"];
	for (unsigned int i = 0; i < t_games.size(); ++i)
		_games.push_back(t_games[i].asString());


	const Json::Value t_thumbnail = root["thumbnail"];
	for (unsigned int i = 0; i < t_thumbnail.size(); ++i)
		_thumbnail.push_back(t_thumbnail[i].asString());


}

Sample::~Sample()
{

}

